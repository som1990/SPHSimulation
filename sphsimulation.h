/*sphsimulation.h
// Author : Soumitra Goswami
// Description: This is our Opengl display widget. We produce particle points and simulate their position and then
//              draw our points here in this widget. 
//              The Slots and signals here are connected via the QT Designer (which autogenerates these connections in
//              the "ui_mainwindow.h" file)
//				This GL widget calls the solver and accesses it based on the SIGNALs received.
//              Refer to this class for working with OpenGL in QT5
*/

#ifndef SPHSIMULATION_H
#define SPHSIMULATION_H

#include <QtWidgets/QMainWindow>
#include <QOpenGLWidget>
#include <QTimer>
#include <qopenglwindow.h>
#include <qopenglfunctions.h>
#include <qopenglbuffer.h>
#include <QOpenGLVertexArrayObject>
#include "Solver.h"
#include <vector>
#include <map>

class QOpenGLShaderProgram;

class SPHSimulation : public QOpenGLWidget, 
					  protected QOpenGLFunctions
{
	Q_OBJECT

public:
	explicit SPHSimulation(QWidget *parent = 0);

	~SPHSimulation();
	void initializeGL();
	void initializeValues();
	void resizeGL(int w, int h);
	void paintGL();
	void teardownGL();
	
//Listens to the signals generated by
protected slots:
	void update();
	void pauseSimulation();
	void restartSimulation();
	void settimestep(float t);

	void setparticleCount(size_t pCount);
	void setmass(float m);
	void setradius(float r);

	void setgravity(float gravY);
	void setpresConst(float pConst);
	void setpresGamma(float gamma);
	void setdensity(float rho);

	void setviscConst(float vConst);
	void setviscE(float  vE);
	void setWallSticky(float wSticky);

signals:
	void timestepChanged(float t);

	void pCountChanged(size_t pCount);
	void massChanged(float m);
	void radiusChanged(float r);

	void gravityChanged(float gravY);
	void presConstChanged(float pConst);
	void presGammaChanged(float gamma);
	void densityChanged(float rho);

	void viscConstChanged(float vConst);
	void viscEChanged(float vE);
	void wallStickyChanged(float wSticky);

//	virtual void keyPressEvent(QKeyEvent *event);


private:
	QOpenGLBuffer m_vertex;
	QOpenGLVertexArrayObject m_object;
	QOpenGLShaderProgram *m_program;
	std::vector<Vertex> vList;
	std::map<int, Particle> pList;
	Vertex* testList;
	bool pause = false;
	Solver sph;
//	Ui::Mainwindow *ui;
	void printContextInformation();
	QTimer timer;
};

#endif // SPHSIMULATION_H
